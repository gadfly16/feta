// Code generated by pigeon; DO NOT EDIT.

package feta

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

func toList(v interface{}) []interface{} {
	if v == nil {
		return nil
	}
	return v.([]interface{})
}

var g = &grammar{
	rules: []*rule{
		{
			name: "QueryLine",
			pos:  position{line: 18, col: 1, offset: 178},
			expr: &actionExpr{
				pos: position{line: 18, col: 13, offset: 190},
				run: (*parser).callonQueryLine1,
				expr: &seqExpr{
					pos: position{line: 18, col: 13, offset: 190},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 18, col: 13, offset: 190},
							label: "query",
							expr: &ruleRefExpr{
								pos:  position{line: 18, col: 19, offset: 196},
								name: "Query",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 18, col: 25, offset: 202},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Query",
			pos:  position{line: 22, col: 1, offset: 230},
			expr: &actionExpr{
				pos: position{line: 22, col: 9, offset: 238},
				run: (*parser).callonQuery1,
				expr: &seqExpr{
					pos: position{line: 22, col: 9, offset: 238},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 9, offset: 238},
							label: "sels_",
							expr: &zeroOrMoreExpr{
								pos: position{line: 22, col: 15, offset: 244},
								expr: &ruleRefExpr{
									pos:  position{line: 22, col: 15, offset: 244},
									name: "Selector",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 22, col: 25, offset: 254},
							label: "tail",
							expr: &zeroOrOneExpr{
								pos: position{line: 22, col: 30, offset: 259},
								expr: &ruleRefExpr{
									pos:  position{line: 22, col: 30, offset: 259},
									name: "Tail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 67, col: 1, offset: 1115},
			expr: &actionExpr{
				pos: position{line: 67, col: 14, offset: 1128},
				run: (*parser).callonExpression1,
				expr: &seqExpr{
					pos: position{line: 67, col: 14, offset: 1128},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 67, col: 14, offset: 1128},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 16, offset: 1130},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 22, offset: 1136},
								name: "Level_A",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 30, offset: 1144},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 32, offset: 1146},
							label: "rest_",
							expr: &zeroOrMoreExpr{
								pos: position{line: 67, col: 38, offset: 1152},
								expr: &seqExpr{
									pos: position{line: 67, col: 39, offset: 1153},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 67, col: 39, offset: 1153},
											name: "Or",
										},
										&ruleRefExpr{
											pos:  position{line: 67, col: 42, offset: 1156},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 67, col: 44, offset: 1158},
											name: "Level_A",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 54, offset: 1168},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "Or",
			pos:  position{line: 80, col: 1, offset: 1389},
			expr: &actionExpr{
				pos: position{line: 80, col: 6, offset: 1394},
				run: (*parser).callonOr1,
				expr: &litMatcher{
					pos:        position{line: 80, col: 6, offset: 1394},
					val:        "||",
					ignoreCase: false,
				},
			},
		},
		{
			name: "Level_A",
			pos:  position{line: 84, col: 1, offset: 1427},
			expr: &actionExpr{
				pos: position{line: 84, col: 11, offset: 1437},
				run: (*parser).callonLevel_A1,
				expr: &seqExpr{
					pos: position{line: 84, col: 11, offset: 1437},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 84, col: 11, offset: 1437},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 17, offset: 1443},
								name: "Level_B",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 84, col: 25, offset: 1451},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 84, col: 27, offset: 1453},
							label: "rest_",
							expr: &zeroOrMoreExpr{
								pos: position{line: 84, col: 33, offset: 1459},
								expr: &seqExpr{
									pos: position{line: 84, col: 34, offset: 1460},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 84, col: 34, offset: 1460},
											name: "And",
										},
										&ruleRefExpr{
											pos:  position{line: 84, col: 38, offset: 1464},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 84, col: 40, offset: 1466},
											name: "Level_B",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "And",
			pos:  position{line: 97, col: 1, offset: 1696},
			expr: &actionExpr{
				pos: position{line: 97, col: 7, offset: 1702},
				run: (*parser).callonAnd1,
				expr: &litMatcher{
					pos:        position{line: 97, col: 7, offset: 1702},
					val:        "&&",
					ignoreCase: false,
				},
			},
		},
		{
			name: "Level_B",
			pos:  position{line: 101, col: 1, offset: 1736},
			expr: &actionExpr{
				pos: position{line: 101, col: 11, offset: 1746},
				run: (*parser).callonLevel_B1,
				expr: &seqExpr{
					pos: position{line: 101, col: 11, offset: 1746},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 101, col: 11, offset: 1746},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 101, col: 17, offset: 1752},
								name: "Level_C",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 25, offset: 1760},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 101, col: 27, offset: 1762},
							label: "rest_",
							expr: &zeroOrMoreExpr{
								pos: position{line: 101, col: 33, offset: 1768},
								expr: &seqExpr{
									pos: position{line: 101, col: 34, offset: 1769},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 101, col: 34, offset: 1769},
											name: "Comparison",
										},
										&ruleRefExpr{
											pos:  position{line: 101, col: 45, offset: 1780},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 101, col: 47, offset: 1782},
											name: "Level_C",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Comparison",
			pos:  position{line: 114, col: 1, offset: 2016},
			expr: &actionExpr{
				pos: position{line: 114, col: 14, offset: 2029},
				run: (*parser).callonComparison1,
				expr: &choiceExpr{
					pos: position{line: 114, col: 15, offset: 2030},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 114, col: 15, offset: 2030},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 114, col: 22, offset: 2037},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 114, col: 29, offset: 2044},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 114, col: 36, offset: 2051},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 114, col: 43, offset: 2058},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 114, col: 49, offset: 2064},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Level_C",
			pos:  position{line: 130, col: 1, offset: 2375},
			expr: &actionExpr{
				pos: position{line: 130, col: 11, offset: 2385},
				run: (*parser).callonLevel_C1,
				expr: &seqExpr{
					pos: position{line: 130, col: 11, offset: 2385},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 130, col: 11, offset: 2385},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 17, offset: 2391},
								name: "Level_D",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 25, offset: 2399},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 130, col: 27, offset: 2401},
							label: "rest_",
							expr: &zeroOrMoreExpr{
								pos: position{line: 130, col: 33, offset: 2407},
								expr: &seqExpr{
									pos: position{line: 130, col: 34, offset: 2408},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 130, col: 34, offset: 2408},
											name: "Additive",
										},
										&ruleRefExpr{
											pos:  position{line: 130, col: 43, offset: 2417},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 130, col: 45, offset: 2419},
											name: "Level_D",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Additive",
			pos:  position{line: 143, col: 1, offset: 2649},
			expr: &actionExpr{
				pos: position{line: 143, col: 12, offset: 2660},
				run: (*parser).callonAdditive1,
				expr: &choiceExpr{
					pos: position{line: 143, col: 13, offset: 2661},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 143, col: 13, offset: 2661},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 143, col: 19, offset: 2667},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Level_D",
			pos:  position{line: 147, col: 1, offset: 2714},
			expr: &actionExpr{
				pos: position{line: 147, col: 11, offset: 2724},
				run: (*parser).callonLevel_D1,
				expr: &seqExpr{
					pos: position{line: 147, col: 11, offset: 2724},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 147, col: 11, offset: 2724},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 17, offset: 2730},
								name: "Level_E",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 25, offset: 2738},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 27, offset: 2740},
							label: "rest_",
							expr: &zeroOrMoreExpr{
								pos: position{line: 147, col: 33, offset: 2746},
								expr: &seqExpr{
									pos: position{line: 147, col: 34, offset: 2747},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 147, col: 34, offset: 2747},
											name: "Multiplicative",
										},
										&ruleRefExpr{
											pos:  position{line: 147, col: 49, offset: 2762},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 147, col: 51, offset: 2764},
											name: "Level_E",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Multiplicative",
			pos:  position{line: 160, col: 1, offset: 2995},
			expr: &actionExpr{
				pos: position{line: 160, col: 18, offset: 3012},
				run: (*parser).callonMultiplicative1,
				expr: &choiceExpr{
					pos: position{line: 160, col: 19, offset: 3013},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 160, col: 19, offset: 3013},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 160, col: 25, offset: 3019},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Level_E",
			pos:  position{line: 164, col: 1, offset: 3067},
			expr: &actionExpr{
				pos: position{line: 164, col: 11, offset: 3077},
				run: (*parser).callonLevel_E1,
				expr: &seqExpr{
					pos: position{line: 164, col: 11, offset: 3077},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 164, col: 11, offset: 3077},
							label: "op",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 14, offset: 3080},
								expr: &litMatcher{
									pos:        position{line: 164, col: 14, offset: 3080},
									val:        "!",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 19, offset: 3085},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 164, col: 21, offset: 3087},
							label: "operand",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 29, offset: 3095},
								name: "Resolution",
							},
						},
					},
				},
			},
		},
		{
			name: "Resolution",
			pos:  position{line: 171, col: 1, offset: 3191},
			expr: &actionExpr{
				pos: position{line: 171, col: 14, offset: 3204},
				run: (*parser).callonResolution1,
				expr: &seqExpr{
					pos: position{line: 171, col: 14, offset: 3204},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 171, col: 14, offset: 3204},
							label: "isRaw",
							expr: &zeroOrOneExpr{
								pos: position{line: 171, col: 20, offset: 3210},
								expr: &litMatcher{
									pos:        position{line: 171, col: 20, offset: 3210},
									val:        "@",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 171, col: 25, offset: 3215},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 31, offset: 3221},
								name: "Value",
							},
						},
						&labeledExpr{
							pos:   position{line: 171, col: 37, offset: 3227},
							label: "rest_",
							expr: &zeroOrMoreExpr{
								pos: position{line: 171, col: 43, offset: 3233},
								expr: &ruleRefExpr{
									pos:  position{line: 171, col: 43, offset: 3233},
									name: "Resolver",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Resolver",
			pos:  position{line: 197, col: 1, offset: 3754},
			expr: &choiceExpr{
				pos: position{line: 197, col: 12, offset: 3765},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 197, col: 12, offset: 3765},
						name: "Attribute",
					},
					&ruleRefExpr{
						pos:  position{line: 197, col: 24, offset: 3777},
						name: "Index",
					},
				},
			},
		},
		{
			name: "Index",
			pos:  position{line: 199, col: 1, offset: 3784},
			expr: &actionExpr{
				pos: position{line: 199, col: 9, offset: 3792},
				run: (*parser).callonIndex1,
				expr: &seqExpr{
					pos: position{line: 199, col: 9, offset: 3792},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 199, col: 9, offset: 3792},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 199, col: 13, offset: 3796},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 199, col: 15, offset: 3798},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 20, offset: 3803},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 199, col: 31, offset: 3814},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 199, col: 33, offset: 3816},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Attribute",
			pos:  position{line: 203, col: 1, offset: 3868},
			expr: &actionExpr{
				pos: position{line: 203, col: 13, offset: 3880},
				run: (*parser).callonAttribute1,
				expr: &seqExpr{
					pos: position{line: 203, col: 13, offset: 3880},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 203, col: 13, offset: 3880},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 203, col: 17, offset: 3884},
							label: "identifier",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 28, offset: 3895},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "Value",
			pos:  position{line: 207, col: 1, offset: 3935},
			expr: &choiceExpr{
				pos: position{line: 207, col: 10, offset: 3944},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 207, col: 10, offset: 3944},
						name: "Bool",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 17, offset: 3951},
						name: "None",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 24, offset: 3958},
						name: "Number",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 33, offset: 3967},
						name: "String",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 42, offset: 3976},
						name: "Identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 55, offset: 3989},
						name: "List",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 62, offset: 3996},
						name: "Dict",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 69, offset: 4003},
						name: "Subquery",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 80, offset: 4014},
						name: "Compound",
					},
				},
			},
		},
		{
			name: "Subquery",
			pos:  position{line: 209, col: 1, offset: 4024},
			expr: &actionExpr{
				pos: position{line: 209, col: 12, offset: 4035},
				run: (*parser).callonSubquery1,
				expr: &seqExpr{
					pos: position{line: 209, col: 12, offset: 4035},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 209, col: 12, offset: 4035},
							val:        "(|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 209, col: 17, offset: 4040},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 209, col: 19, offset: 4042},
							label: "query",
							expr: &ruleRefExpr{
								pos:  position{line: 209, col: 25, offset: 4048},
								name: "Query",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 209, col: 31, offset: 4054},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 209, col: 33, offset: 4056},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Compound",
			pos:  position{line: 214, col: 1, offset: 4101},
			expr: &actionExpr{
				pos: position{line: 214, col: 12, offset: 4112},
				run: (*parser).callonCompound1,
				expr: &seqExpr{
					pos: position{line: 214, col: 12, offset: 4112},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 214, col: 12, offset: 4112},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 16, offset: 4116},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 18, offset: 4118},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 23, offset: 4123},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 34, offset: 4134},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 214, col: 36, offset: 4136},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "List",
			pos:  position{line: 218, col: 1, offset: 4186},
			expr: &actionExpr{
				pos: position{line: 218, col: 8, offset: 4193},
				run: (*parser).callonList1,
				expr: &seqExpr{
					pos: position{line: 218, col: 8, offset: 4193},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 218, col: 8, offset: 4193},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 12, offset: 4197},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 14, offset: 4199},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 20, offset: 4205},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 31, offset: 4216},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 33, offset: 4218},
							label: "rest_",
							expr: &zeroOrMoreExpr{
								pos: position{line: 218, col: 39, offset: 4224},
								expr: &ruleRefExpr{
									pos:  position{line: 218, col: 39, offset: 4224},
									name: "ListElements",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 53, offset: 4238},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListElements",
			pos:  position{line: 228, col: 1, offset: 4413},
			expr: &actionExpr{
				pos: position{line: 228, col: 16, offset: 4428},
				run: (*parser).callonListElements1,
				expr: &seqExpr{
					pos: position{line: 228, col: 16, offset: 4428},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 228, col: 16, offset: 4428},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 228, col: 20, offset: 4432},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 228, col: 22, offset: 4434},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 27, offset: 4439},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 228, col: 38, offset: 4450},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "Dict",
			pos:  position{line: 232, col: 1, offset: 4475},
			expr: &actionExpr{
				pos: position{line: 232, col: 8, offset: 4482},
				run: (*parser).callonDict1,
				expr: &seqExpr{
					pos: position{line: 232, col: 8, offset: 4482},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 8, offset: 4482},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 12, offset: 4486},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 14, offset: 4488},
							label: "first_",
							expr: &seqExpr{
								pos: position{line: 232, col: 22, offset: 4496},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 232, col: 22, offset: 4496},
										name: "Identifier",
									},
									&litMatcher{
										pos:        position{line: 232, col: 33, offset: 4507},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 232, col: 37, offset: 4511},
										name: "_",
									},
									&ruleRefExpr{
										pos:  position{line: 232, col: 39, offset: 4513},
										name: "Expression",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 51, offset: 4525},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 53, offset: 4527},
							label: "rest_",
							expr: &zeroOrMoreExpr{
								pos: position{line: 232, col: 59, offset: 4533},
								expr: &seqExpr{
									pos: position{line: 232, col: 60, offset: 4534},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 232, col: 60, offset: 4534},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 232, col: 64, offset: 4538},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 232, col: 66, offset: 4540},
											name: "Identifier",
										},
										&litMatcher{
											pos:        position{line: 232, col: 77, offset: 4551},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 232, col: 81, offset: 4555},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 232, col: 83, offset: 4557},
											name: "Expression",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 96, offset: 4570},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 232, col: 98, offset: 4572},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 244, col: 1, offset: 4855},
			expr: &choiceExpr{
				pos: position{line: 244, col: 14, offset: 4868},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 244, col: 14, offset: 4868},
						run: (*parser).callonIdentifier2,
						expr: &oneOrMoreExpr{
							pos: position{line: 244, col: 14, offset: 4868},
							expr: &charClassMatcher{
								pos:        position{line: 244, col: 14, offset: 4868},
								val:        "[\\pL\\pNd_]",
								chars:      []rune{'d', '_'},
								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&actionExpr{
						pos: position{line: 246, col: 5, offset: 4938},
						run: (*parser).callonIdentifier5,
						expr: &litMatcher{
							pos:        position{line: 246, col: 5, offset: 4938},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Bool",
			pos:  position{line: 250, col: 1, offset: 4973},
			expr: &choiceExpr{
				pos: position{line: 250, col: 8, offset: 4980},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 250, col: 8, offset: 4980},
						run: (*parser).callonBool2,
						expr: &litMatcher{
							pos:        position{line: 250, col: 8, offset: 4980},
							val:        "true",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 252, col: 5, offset: 5019},
						run: (*parser).callonBool4,
						expr: &litMatcher{
							pos:        position{line: 252, col: 5, offset: 5019},
							val:        "false",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "None",
			pos:  position{line: 256, col: 1, offset: 5059},
			expr: &actionExpr{
				pos: position{line: 256, col: 8, offset: 5066},
				run: (*parser).callonNone1,
				expr: &litMatcher{
					pos:        position{line: 256, col: 8, offset: 5066},
					val:        "none",
					ignoreCase: true,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 260, col: 1, offset: 5100},
			expr: &actionExpr{
				pos: position{line: 260, col: 10, offset: 5109},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 260, col: 10, offset: 5109},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 260, col: 10, offset: 5109},
							expr: &litMatcher{
								pos:        position{line: 260, col: 10, offset: 5109},
								val:        "-",
								ignoreCase: false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 260, col: 15, offset: 5114},
							name: "Integer",
						},
						&zeroOrOneExpr{
							pos: position{line: 260, col: 23, offset: 5122},
							expr: &seqExpr{
								pos: position{line: 260, col: 25, offset: 5124},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 260, col: 25, offset: 5124},
										val:        ".",
										ignoreCase: false,
									},
									&oneOrMoreExpr{
										pos: position{line: 260, col: 29, offset: 5128},
										expr: &ruleRefExpr{
											pos:  position{line: 260, col: 29, offset: 5128},
											name: "DecimalDigit",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 260, col: 46, offset: 5145},
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 46, offset: 5145},
								name: "Exponent",
							},
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 265, col: 1, offset: 5240},
			expr: &choiceExpr{
				pos: position{line: 265, col: 11, offset: 5250},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 265, col: 11, offset: 5250},
						val:        "0",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 265, col: 17, offset: 5256},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 265, col: 17, offset: 5256},
								name: "NonZeroDecimalDigit",
							},
							&zeroOrMoreExpr{
								pos: position{line: 265, col: 37, offset: 5276},
								expr: &ruleRefExpr{
									pos:  position{line: 265, col: 37, offset: 5276},
									name: "DecimalDigit",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exponent",
			pos:  position{line: 267, col: 1, offset: 5291},
			expr: &seqExpr{
				pos: position{line: 267, col: 12, offset: 5302},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 267, col: 12, offset: 5302},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 267, col: 17, offset: 5307},
						expr: &charClassMatcher{
							pos:        position{line: 267, col: 17, offset: 5307},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 267, col: 23, offset: 5313},
						expr: &ruleRefExpr{
							pos:  position{line: 267, col: 23, offset: 5313},
							name: "DecimalDigit",
						},
					},
				},
			},
		},
		{
			name: "DecimalDigit",
			pos:  position{line: 269, col: 1, offset: 5328},
			expr: &charClassMatcher{
				pos:        position{line: 269, col: 16, offset: 5343},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "NonZeroDecimalDigit",
			pos:  position{line: 271, col: 1, offset: 5350},
			expr: &charClassMatcher{
				pos:        position{line: 271, col: 23, offset: 5372},
				val:        "[1-9]",
				ranges:     []rune{'1', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "String",
			pos:  position{line: 273, col: 1, offset: 5379},
			expr: &actionExpr{
				pos: position{line: 273, col: 10, offset: 5388},
				run: (*parser).callonString1,
				expr: &seqExpr{
					pos: position{line: 273, col: 10, offset: 5388},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 10, offset: 5388},
							val:        "\"",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 14, offset: 5392},
							expr: &choiceExpr{
								pos: position{line: 273, col: 16, offset: 5394},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 273, col: 16, offset: 5394},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 273, col: 16, offset: 5394},
												expr: &ruleRefExpr{
													pos:  position{line: 273, col: 17, offset: 5395},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 273, col: 29, offset: 5407,
											},
										},
									},
									&seqExpr{
										pos: position{line: 273, col: 33, offset: 5411},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 273, col: 33, offset: 5411},
												val:        "\\",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 273, col: 38, offset: 5416},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 56, offset: 5434},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 278, col: 1, offset: 5513},
			expr: &charClassMatcher{
				pos:        position{line: 278, col: 15, offset: 5527},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 280, col: 1, offset: 5543},
			expr: &choiceExpr{
				pos: position{line: 280, col: 18, offset: 5560},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 280, col: 18, offset: 5560},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 37, offset: 5579},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 282, col: 1, offset: 5594},
			expr: &charClassMatcher{
				pos:        position{line: 282, col: 20, offset: 5613},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 284, col: 1, offset: 5626},
			expr: &seqExpr{
				pos: position{line: 284, col: 17, offset: 5642},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 284, col: 17, offset: 5642},
						val:        "u",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 21, offset: 5646},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 30, offset: 5655},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 39, offset: 5664},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 48, offset: 5673},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 286, col: 1, offset: 5683},
			expr: &charClassMatcher{
				pos:        position{line: 286, col: 12, offset: 5694},
				val:        "[0-9a-f]i",
				ranges:     []rune{'0', '9', 'a', 'f'},
				ignoreCase: true,
				inverted:   false,
			},
		},
		{
			name: "Selector",
			pos:  position{line: 290, col: 1, offset: 5719},
			expr: &choiceExpr{
				pos: position{line: 290, col: 12, offset: 5730},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 290, col: 12, offset: 5730},
						name: "Recurse",
					},
					&ruleRefExpr{
						pos:  position{line: 290, col: 22, offset: 5740},
						name: "Relative",
					},
					&ruleRefExpr{
						pos:  position{line: 290, col: 33, offset: 5751},
						name: "Dir",
					},
					&ruleRefExpr{
						pos:  position{line: 290, col: 39, offset: 5757},
						name: "Pattern",
					},
					&ruleRefExpr{
						pos:  position{line: 290, col: 49, offset: 5767},
						name: "Filter",
					},
				},
			},
		},
		{
			name: "Tail",
			pos:  position{line: 292, col: 1, offset: 5775},
			expr: &choiceExpr{
				pos: position{line: 292, col: 8, offset: 5782},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 292, col: 8, offset: 5782},
						run: (*parser).callonTail2,
						expr: &seqExpr{
							pos: position{line: 292, col: 8, offset: 5782},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 292, col: 8, offset: 5782},
									val:        "|",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 292, col: 12, offset: 5786},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 292, col: 17, offset: 5791},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 295, col: 5, offset: 5874},
						run: (*parser).callonTail7,
						expr: &litMatcher{
							pos:        position{line: 295, col: 5, offset: 5874},
							val:        "|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Dir",
			pos:  position{line: 299, col: 1, offset: 5907},
			expr: &actionExpr{
				pos: position{line: 299, col: 7, offset: 5913},
				run: (*parser).callonDir1,
				expr: &labeledExpr{
					pos:   position{line: 299, col: 7, offset: 5913},
					label: "dirs_",
					expr: &oneOrMoreExpr{
						pos: position{line: 299, col: 13, offset: 5919},
						expr: &litMatcher{
							pos:        position{line: 299, col: 13, offset: 5919},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 303, col: 1, offset: 5977},
			expr: &actionExpr{
				pos: position{line: 303, col: 10, offset: 5986},
				run: (*parser).callonFilter1,
				expr: &seqExpr{
					pos: position{line: 303, col: 10, offset: 5986},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 303, col: 10, offset: 5986},
							val:        "(?",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 303, col: 15, offset: 5991},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 20, offset: 5996},
								name: "Expression",
							},
						},
						&litMatcher{
							pos:        position{line: 303, col: 31, offset: 6007},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Relative",
			pos:  position{line: 307, col: 1, offset: 6060},
			expr: &actionExpr{
				pos: position{line: 307, col: 12, offset: 6071},
				run: (*parser).callonRelative1,
				expr: &seqExpr{
					pos: position{line: 307, col: 12, offset: 6071},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 307, col: 12, offset: 6071},
							label: "rel_",
							expr: &oneOrMoreExpr{
								pos: position{line: 307, col: 17, offset: 6076},
								expr: &litMatcher{
									pos:        position{line: 307, col: 17, offset: 6076},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&andExpr{
							pos: position{line: 307, col: 22, offset: 6081},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 23, offset: 6082},
								name: "OpStop",
							},
						},
					},
				},
			},
		},
		{
			name: "Recurse",
			pos:  position{line: 312, col: 1, offset: 6153},
			expr: &actionExpr{
				pos: position{line: 312, col: 11, offset: 6163},
				run: (*parser).callonRecurse1,
				expr: &litMatcher{
					pos:        position{line: 312, col: 11, offset: 6163},
					val:        "**/",
					ignoreCase: false,
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 317, col: 1, offset: 6230},
			expr: &actionExpr{
				pos: position{line: 317, col: 11, offset: 6240},
				run: (*parser).callonPattern1,
				expr: &oneOrMoreExpr{
					pos: position{line: 317, col: 11, offset: 6240},
					expr: &charClassMatcher{
						pos:        position{line: 317, col: 11, offset: 6240},
						val:        "[^/()|]",
						chars:      []rune{'/', '(', ')', '|'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "OpStop",
			pos:  position{line: 329, col: 1, offset: 6501},
			expr: &choiceExpr{
				pos: position{line: 329, col: 10, offset: 6510},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 329, col: 10, offset: 6510},
						val:        "/",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 329, col: 16, offset: 6516},
						name: "EOF",
					},
					&litMatcher{
						pos:        position{line: 329, col: 22, offset: 6522},
						val:        "|",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 329, col: 28, offset: 6528},
						val:        ")",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 331, col: 1, offset: 6533},
			expr: &zeroOrMoreExpr{
				pos: position{line: 331, col: 18, offset: 6550},
				expr: &charClassMatcher{
					pos:        position{line: 331, col: 18, offset: 6550},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 333, col: 1, offset: 6562},
			expr: &notExpr{
				pos: position{line: 333, col: 7, offset: 6568},
				expr: &anyMatcher{
					line: 333, col: 8, offset: 6569,
				},
			},
		},
	},
}

func (c *current) onQueryLine1(query interface{}) (interface{}, error) {
	return query, nil
}

func (p *parser) callonQueryLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQueryLine1(stack["query"])
}

func (c *current) onQuery1(sels_, tail interface{}) (interface{}, error) {
	sels := toList(sels_)
	length := len(sels)
	var last selector
	var hasTail bool
	var multi bool
	if tail != nil {
		last = tail.(selector)
		hasTail = true
	}
	if length == 0 {
		return &queryNode{&relSel{count: 1, next: last}, multi, hasTail}, nil
	}
	for i := length - 1; i >= 0; i-- {
		sel := sels[i].(selector)
		switch s := sel.(type) {
		case *patternSel:
			if s.multi {
				multi = true
			}
		case *filterSel, *recurseSel:
			multi = true
		}
		sel.setNext(last)
		last = sel
	}
	switch first := sels[0].(type) {
	case *dirSel:
		Log("Parser: added root op")
		if first.count == 1 {
			sel := &rootSel{}
			sel.setNext(last)
			last = sel
		}
	case *patternSel:
		Log("Parser: added dir sel at start")
		sel := &dirSel{}
		sel.setNext(last)
		last = sel
	}
	return &queryNode{last, multi, hasTail}, nil
}

func (p *parser) callonQuery1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuery1(stack["sels_"], stack["tail"])
}

func (c *current) onExpression1(first, rest_ interface{}) (interface{}, error) {
	left := first.(fExpr)
	rest := toList(rest_)
	for _, comp_ := range rest {
		comp := toList(comp_)
		node := comp[0].(*orNode)
		node.left = left
		node.right = comp[2].(fExpr)
		left = node
	}
	return left, nil
}

func (p *parser) callonExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression1(stack["first"], stack["rest_"])
}

func (c *current) onOr1() (interface{}, error) {
	return &orNode{}, nil
}

func (p *parser) callonOr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOr1()
}

func (c *current) onLevel_A1(first, rest_ interface{}) (interface{}, error) {
	left := first.(fExpr)
	rest := toList(rest_)
	for _, comp_ := range rest {
		comp := toList(comp_)
		node := comp[0].(*andNode)
		node.left = left
		node.right = comp[2].(fExpr)
		left = node
	}
	return left, nil
}

func (p *parser) callonLevel_A1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLevel_A1(stack["first"], stack["rest_"])
}

func (c *current) onAnd1() (interface{}, error) {
	return &andNode{}, nil
}

func (p *parser) callonAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnd1()
}

func (c *current) onLevel_B1(first, rest_ interface{}) (interface{}, error) {
	left := first.(fExpr)
	rest := toList(rest_)
	for _, comp_ := range rest {
		comp := toList(comp_)
		node := comp[0].(*compareNode)
		node.left = left
		node.right = comp[2].(fExpr)
		left = node
	}
	return left, nil
}

func (p *parser) callonLevel_B1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLevel_B1(stack["first"], stack["rest_"])
}

func (c *current) onComparison1() (interface{}, error) {
	switch string(c.text) {
	case "==":
		return &compareNode{op: EQ}, nil
	case "!=":
		return &compareNode{op: NEQ}, nil
	case "<=":
		return &compareNode{op: LEEQ}, nil
	case ">=":
		return &compareNode{op: GREQ}, nil
	case "<":
		return &compareNode{op: LE}, nil
	}
	return &compareNode{op: GR}, nil
}

func (p *parser) callonComparison1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparison1()
}

func (c *current) onLevel_C1(first, rest_ interface{}) (interface{}, error) {
	left := first.(fExpr)
	rest := toList(rest_)
	for _, comp_ := range rest {
		comp := toList(comp_)
		node := comp[0].(*addNode)
		node.left = left
		node.right = comp[2].(fExpr)
		left = node
	}
	return left, nil
}

func (p *parser) callonLevel_C1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLevel_C1(stack["first"], stack["rest_"])
}

func (c *current) onAdditive1() (interface{}, error) {
	return &addNode{op: c.text[0]}, nil
}

func (p *parser) callonAdditive1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditive1()
}

func (c *current) onLevel_D1(first, rest_ interface{}) (interface{}, error) {
	left := first.(fExpr)
	rest := toList(rest_)
	for _, comp_ := range rest {
		comp := toList(comp_)
		node := comp[0].(*multNode)
		node.left = left
		node.right = comp[2].(fExpr)
		left = node
	}
	return left, nil
}

func (p *parser) callonLevel_D1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLevel_D1(stack["first"], stack["rest_"])
}

func (c *current) onMultiplicative1() (interface{}, error) {
	return &multNode{op: c.text[0]}, nil
}

func (p *parser) callonMultiplicative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicative1()
}

func (c *current) onLevel_E1(op, operand interface{}) (interface{}, error) {
	if op == nil {
		return operand, nil
	}
	return &notNode{operand.(fExpr)}, nil
}

func (p *parser) callonLevel_E1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLevel_E1(stack["op"], stack["operand"])
}

func (c *current) onResolution1(isRaw, first, rest_ interface{}) (interface{}, error) {
	raw := isRaw != nil
	rest := toList(rest_)
	if len(rest) == 0 {
		if f, ok := first.(*attribRes); ok {
			f.setNextAndRaw(nil, raw)
		}
		return first, nil
	}
	var last resolver
	for i := len(rest) - 1; i >= 0; i-- {
		node := rest[i].(resolver)
		node.setNextAndRaw(last, raw)
		last = node
	}
	switch f := first.(type) {
	case *attribRes:
		f.setNextAndRaw(last, raw)
		return f, nil
	default:
		first = &valueRes{expr: first.(fExpr)}
	}
	first.(resolver).setNextAndRaw(last, raw)
	return first.(fExpr), nil
}

func (p *parser) callonResolution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolution1(stack["isRaw"], stack["first"], stack["rest_"])
}

func (c *current) onIndex1(expr interface{}) (interface{}, error) {
	return &indexRes{expr: expr.(fExpr)}, nil
}

func (p *parser) callonIndex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndex1(stack["expr"])
}

func (c *current) onAttribute1(identifier interface{}) (interface{}, error) {
	return identifier, nil
}

func (p *parser) callonAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttribute1(stack["identifier"])
}

func (c *current) onSubquery1(query interface{}) (interface{}, error) {
	Log("Subquery")
	return query, nil
}

func (p *parser) callonSubquery1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubquery1(stack["query"])
}

func (c *current) onCompound1(expr interface{}) (interface{}, error) {
	return &compoundNode{expr.(fExpr)}, nil
}

func (p *parser) callonCompound1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCompound1(stack["expr"])
}

func (c *current) onList1(first, rest_ interface{}) (interface{}, error) {
	rest := toList(rest_)
	list := make([]fExpr, len(rest)+1)
	list[0] = first.(fExpr)
	for i, elm := range rest {
		list[i+1] = elm.(fExpr)
	}
	return fList(list), nil
}

func (p *parser) callonList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList1(stack["first"], stack["rest_"])
}

func (c *current) onListElements1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements1(stack["expr"])
}

func (c *current) onDict1(first_, rest_ interface{}) (interface{}, error) {
	first := toList(first_)
	rest := toList(rest_)
	dict := make(map[string]fExpr)
	dict[first[0].(*attribRes).identifier] = first[3].(fExpr)
	for _, kvp_ := range rest {
		kvp := toList(kvp_)
		dict[kvp[2].(*attribRes).identifier] = kvp[5].(fExpr)
	}
	return fDict(dict), nil
}

func (p *parser) callonDict1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDict1(stack["first_"], stack["rest_"])
}

func (c *current) onIdentifier2() (interface{}, error) {
	return &attribRes{identifier: string(c.text)}, nil
}

func (p *parser) callonIdentifier2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier2()
}

func (c *current) onIdentifier5() (interface{}, error) {
	return &attribRes{}, nil
}

func (p *parser) callonIdentifier5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier5()
}

func (c *current) onBool2() (interface{}, error) {
	return fBool(true), nil
}

func (p *parser) callonBool2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBool2()
}

func (c *current) onBool4() (interface{}, error) {
	return fBool(false), nil
}

func (p *parser) callonBool4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBool4()
}

func (c *current) onNone1() (interface{}, error) {
	return fNone{}, nil
}

func (p *parser) callonNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNone1()
}

func (c *current) onNumber1() (interface{}, error) {
	n, err := strconv.ParseFloat(string(c.text), 64)
	return fNumber(n), err
}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onString1() (interface{}, error) {
	s, err := strconv.Unquote(string(c.text))
	return fString(s), err
}

func (p *parser) callonString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1()
}

func (c *current) onTail2(expr interface{}) (interface{}, error) {
	Log("Parser: in tail")
	return &tailSel{expr: expr.(fExpr)}, nil
}

func (p *parser) callonTail2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTail2(stack["expr"])
}

func (c *current) onTail7() (interface{}, error) {
	return &tailSel{}, nil
}

func (p *parser) callonTail7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTail7()
}

func (c *current) onDir1(dirs_ interface{}) (interface{}, error) {
	return &dirSel{count: len(toList(dirs_))}, nil
}

func (p *parser) callonDir1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDir1(stack["dirs_"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return &filterSel{expr: expr.(fExpr)}, nil
}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onRelative1(rel_ interface{}) (interface{}, error) {
	rel := toList(rel_)
	return &relSel{count: len(rel)}, nil
}

func (p *parser) callonRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelative1(stack["rel_"])
}

func (c *current) onRecurse1() (interface{}, error) {
	Log("Parser: in 'recurse'")
	return &recurseSel{}, nil
}

func (p *parser) callonRecurse1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecurse1()
}

func (c *current) onPattern1() (interface{}, error) {
	Log("Parser: in 'pattern'")
	p := regexp.QuoteMeta(string(c.text))
	r := strings.ReplaceAll(p, "\\*", ".*")
	multi := false
	if r != p {
		multi = true
	}
	rex := regexp.MustCompile("^" + r + "$")
	return &patternSel{rex: rex, multi: multi}, nil
}

func (p *parser) callonPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
